# Upstream definitions
upstream oauth2-proxy {
    server rundeck-oauth2-proxy:4180;
    keepalive 32;
}

upstream rundeck {
    server rundeck-server:4440;
    keepalive 32;
}

# Main server configuration
server {
    listen 80;
    server_name localhost;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Client settings
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Proxy settings (global)
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;

    # Timeout settings
    proxy_connect_timeout 30s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Buffer settings
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 8 8k;
    proxy_busy_buffers_size 16k;

    # OAuth2 Proxy authentication endpoints
    location /oauth2/ {
        proxy_pass http://oauth2-proxy;
        proxy_set_header X-Auth-Request-Redirect $request_uri;

        # Prevent caching
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Internal auth request endpoint
    location = /oauth2/auth {
        internal;
        proxy_pass http://oauth2-proxy;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Remote-Addr $remote_addr;
        proxy_set_header X-Original-Host $host;

        # Timeout for auth requests
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    # Main application - all paths
    location / {
        # Check authentication first
        auth_request /oauth2/auth;

        # Handle auth failure - redirect to OAuth2 start
        error_page 401 403 = @oauth2_start;

        # Extract user information from auth response
        auth_request_set $auth_user $upstream_http_x_auth_request_user;
        auth_request_set $auth_email $upstream_http_x_auth_request_email;
        auth_request_set $auth_groups $upstream_http_x_auth_request_groups;

        # Set user roles - use groups if available, otherwise default
        set $user_roles $auth_groups;
        if ($user_roles = "") {
            set $user_roles "admin,user,architect,deploy,build";
        }

        # Proxy to Rundeck with authentication headers
        proxy_pass http://rundeck;

        # Set authentication headers for Rundeck
        proxy_set_header X-Forwarded-User $auth_user;
        proxy_set_header X-Forwarded-Email $auth_email;
        proxy_set_header X-Forwarded-Roles $user_roles;
        proxy_set_header REMOTE_USER $auth_user;
        proxy_set_header REMOTE_USER_GROUPS $user_roles;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Prevent caching of authentication responses
        proxy_no_cache 1;
        proxy_cache_bypass 1;
    }

    # API endpoints with rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;

        auth_request /oauth2/auth;
        error_page 401 403 = @oauth2_start;

        # Extract user information
        auth_request_set $auth_user $upstream_http_x_auth_request_user;
        auth_request_set $auth_email $upstream_http_x_auth_request_email;
        auth_request_set $auth_groups $upstream_http_x_auth_request_groups;

        set $user_roles $auth_groups;
        if ($user_roles = "") {
            set $user_roles "admin,user,architect,deploy,build";
        }

        if ($auth_user = "") {
            return 401;
        }

        proxy_pass http://rundeck;
        proxy_set_header X-Forwarded-User $auth_user;
        proxy_set_header X-Forwarded-Email $auth_email;
        proxy_set_header X-Forwarded-Roles $user_roles;
        proxy_set_header REMOTE_USER $auth_user;
        proxy_set_header REMOTE_USER_GROUPS $user_roles;
    }

    # OAuth2 start redirect location
    location @oauth2_start {
        return 302 /oauth2/start?rd=$request_uri;
    }

    # Health check endpoint (no auth required)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Nginx status (no auth required)
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 172.16.0.0/12;
        deny all;
    }

    # Error pages
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# WebSocket upgrade mapping
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}
